- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import vpc variables
      include_vars: vars/vpc_setup

    - name: Create VPC
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"
      register: vpcout

    - name: Create public subnet 1 in zone 1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{Zone1}}"
        state: "{{state}}"
        cidr: "{{PubSub1Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub1
      register: pubsub1_out

    - name: Create public subnet 2 in zone 2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{Zone2}}"
        state: "{{state}}"
        cidr: "{{PubSub2Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub2
      register: pubsub2_out

    - name: Create public subnet 3 in zone 3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{Zone3}}"
        state: "{{state}}"
        cidr: "{{PubSub3Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub3
      register: pubsub3_out

    - name: Create private subnet 1 in zone 4
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{Zone1}}"
        state: "{{state}}"
        cidr: "{{PrivSub1Cidr}}"
        resource_tags:
          Name: vprofile-privsub1
      register: privsub1_out

    - name: Create private subnet 2 in zone 2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{Zone2}}"
        state: "{{state}}"
        cidr: "{{PrivSub2Cidr}}"
        resource_tags:
          Name: vprofile-privsub2
      register: privsub2_out

    - name: Create private subnet 3 in zone 3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{Zone3}}"
        state: "{{state}}"
        cidr: "{{PrivSub3Cidr}}"
        resource_tags:
          Name: vprofile-privsub3
      register: privsub3_out

    - name: Internet gateway setup
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}" # required. The VPC ID for the VPC in which to manage the Internet Gateway.
        state: "{{state}}" # not required. choices: present;absent. Create or terminate the IGW
        region: "{{region}}" # not required. The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)
        resource_tags:
          Name: vprofile_IGW
      register: igw_out

    - name: Set up route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}" # required. V P C   I D   o f   t h e   V P C   i n   w h i c h   t o   c r e a t e   t h e   r o u t e   t a b l e .
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_out.gateway_id }}"
        state: "{{state}}" # not required. choices: present;absent. C r e a t e   o r   d e s t r o y   t h e   V P C   r o u t e   t a b l e
        subnets:
          - "{{pubsub1_out.subnet.id}}"
          - "{{pubsub2_out.subnet.id}}"
          - "{{pubsub3_out.subnet.id}}"
        tags: # not required. A   d i c t i o n a r y   o f   r e s o u r c e   t a g s   o f   t h e   f o r m :   {   t a g 1 :   v a l u e 1 ,   t a g 2 :   v a l u e 2   } .   T a g s   a r e   u s e d   t o   u n i q u e l y   i d e n t i f y   r o u t e   t a b l e s   w i t h i n   a   V P C   w h e n   t h e   r o u t e _ t a b l e _ i d   i s   n o t   s u p p l i e d .
          Name: Vprofile-PubRT

        validate_certs: True # not required. When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        profile: # not required. Uses a boto profile. Only works with boto >= 2.24.0.
        region: "{{region}}" # not required. The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)
      register: pubRT_out
    - name: Create nat gateway
      ec2_vpc_nat_gateway:
        state: "{{state}}" # not required. choices: present;absent. Ensure NAT Gateway is present or absent.
        subnet_id: "{{pubsub1_out.subnet.id}}" # not required. The id of the subnet to create the NAT Gateway in. This is required with the present option.
        if_exist_do_not_create: true # not required. if a NAT Gateway exists already in the subnet_id, then do not create a new one.
        region: "{{region}}" # not required. The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)
      register: NATGW_out

    - debug:
        var: NATGW_out # not required. A variable name to debug. Mutually exclusive with the C(msg) option. Be aware that this option already runs in Jinja2 context and has an implicit C({{ }}) wrapping, so you should not be using Jinja2 delimiters unless you are looking for double interpolation.

    - name: Set up route table for private subnet
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}" # required. V P C   I D   o f   t h e   V P C   i n   w h i c h   t o   c r e a t e   t h e   r o u t e   t a b l e .
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ NATGW_out.nat_gateway_id }}"
        state: "{{state}}" # not required. choices: present;absent. C r e a t e   o r   d e s t r o y   t h e   V P C   r o u t e   t a b l e
        subnets:
          - "{{privsub1_out.subnet.id}}"
          - "{{privsub2_out.subnet.id}}"
          - "{{privsub3_out.subnet.id}}"
        tags: # not required. A   d i c t i o n a r y   o f   r e s o u r c e   t a g s   o f   t h e   f o r m :   {   t a g 1 :   v a l u e 1 ,   t a g 2 :   v a l u e 2   } .   T a g s   a r e   u s e d   t o   u n i q u e l y   i d e n t i f y   r o u t e   t a b l e s   w i t h i n   a   V P C   w h e n   t h e   r o u t e _ t a b l e _ i d   i s   n o t   s u p p l i e d .
          Name: Vprofile-PrivRT

        validate_certs: True # not required. When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        profile: # not required. Uses a boto profile. Only works with boto >= 2.24.0.
        region: "{{region}}" # not required. The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See U(http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region)
      register: privRt_out

    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - privsub1_out.subnet.id
        - privsub2_out.subnet.id
        - privsub3_out.subnet.id
        - igw_out.gateway_id
        - pubRT_out.route_table.id
        - NATGW_out.nat_gateway_id
        - privRt_out.route_table.id

- name: Setup Bastion hostname
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import vpc variables
      include_vars: var/output_vars

    - name: IMport AMI variable
      include_vars: vars/ec2stacksetup

    - name: create private key
      ec2_key:
        name: vprofile-stack-key # required. Name of the key pair.
        state: "{{state}}" # not required. choices: present;absent. create or delete keypair
        region: "{{region}}"
      register: vprokey_out

    - name: save private key
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: securtity group for load balancer
      ec2_group:
        name: vprofileELB-sg
        description: Allow port from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: securtity group for load balancer
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          group_id: "{{vproELBSG_out.group_id}}"

        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{BastionSGid}}"
      register: vproStackSG_out

    - name: Update security group with its own sg id
      ec2_group:
        name: vproStack-sg
        description: Allow 22 within
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vproStackSG_out.group_id}}"

    - name: Create Nginx Web01
      ec2:
        key_name: vprofile-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "Web01"
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: vprofile
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Create Tomcat App01
      ec2:
        key_name: vprofile-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
        exact_count: 1
        count_tag:
          Name: "app01"
          Project: vprofile
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Create Memcached mc01
      ec2:
        key_name: vprofile-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
        exact_count: 1
        count_tag:
          Name: "mc01"
          Project: vprofile
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Create RabbitMQ rq01
      ec2:
        key_name: vprofile-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
        exact_count: 1
        count_tag:
          Name: "rmq01"
          Project: vprofile
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Create Mysql db01
      ec2:
        key_name: vprofile-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
        exact_count: 1
        count_tag:
          Name: "db01"
          Project: vprofile
        group_id: "{{vproStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - local_action:
        module: ec2_elb_lb
        state: "{{state}}" # required. choices: absent;present. Create or destroy the ELB
        name: "vprofile-elb" # required. The name of the ELB
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        purge_listeners: true # not required. Purge existing listeners on ELB that are not found in listeners
        instance_ids: "{{web01_out.tagged_instances[0].id}}" # not required. List of instance ids to attach to this ELB
        security_group_ids: "{{vproELBSG_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"

    - name: Insert/update hosts ip`
      blockinfile:
        path: provision-stack/group_vars/hostsip # required. The file to modify. Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).
        block: |
          web01 ansible_host={{web01_out.tagged_instances[0].id}}
          app01 ansible_host={{app01_out.tagged_instances[0].id}}
          rmq01 ansible_host={{rmq01_out.tagged_instances[0].id}}
          mc01 ansible_host={{mc01_out.tagged_instances[0].id}}
          db01 ansible_host={{db01_out.tagged_instances[0].id}}
          cntl ansible_host=127.0.0.1 ansible_connection=local

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision_stack/loginkey_vpro.pem
        mode: "0400"

    - name: Insert/update inventory
      blockinfile:
        path: provision-stack/inventory-vpro/hostsip # required. The file to modify. Before Ansible 2.3 this option was only usable as I(dest), I(destfile) and I(name).
        block: |
          web01 ansible_host={{web01_out.tagged_instances[0].id}}
          app01 ansible_host={{app01_out.tagged_instances[0].id}}
          rmq01 ansible_host={{rmq01_out.tagged_instances[0].id}}
          mc01 ansible_host={{mc01_out.tagged_instances[0].id}}
          db01 ansible_host={{db01_out.tagged_instances[0].id}}
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp
          control

          [stack_inst:vars]
          ansible_user= ubuntu
          ansible_ssh_private_key_file= loginkey_vpro.pem
